plugins {
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.184'
}

version = mod_version
group = mod_group_id
base.archivesName = mod_id

repositories {
    mavenLocal()

    maven {
        name = 'FzzyMaven'
        url = 'https://maven.fzzyhmstrs.me'
    }

    maven {
        url = 'https://thedarkcolour.github.io/KotlinForForge'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation("me.fzzyhmstrs:fzzy_config:${fzzy_config_version}")
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    server {
        argument '--no-gui'
    }

    data {
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version         : minecraft_version,
            minecraft_version_range   : minecraft_version_range,
            neo_version               : neo_version,
            neo_version_range         : neo_version_range,
            loader_version_range      : loader_version_range,
        
            mod_id                    : mod_id,
            mod_name                  : mod_name,
            mod_license               : mod_license,
            mod_version               : mod_version,
            mod_authors               : mod_authors,
            mod_description           : mod_description,
        
            fzzy_config_version_range : fzzy_config_version_range
    ]
    
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
sourceSets.main.resources.srcDir 'src/generated/resources' }
configurations { runtimeClasspath.extendsFrom localRuntime }

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}
